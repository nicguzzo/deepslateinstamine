plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "me.shedaniel.unified-publishing" version "0.1.+"
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name
        mixinConfig "deepslateinstamine-common.mixins.json"
        mixinConfig "deepslateinstamine.mixins.json"
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "${architectury}:architectury-forge:${rootProject.architectury_version}"
    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", rootProject.minecraft_version
    inputs.property "architectury_version", rootProject.architectury_version
    inputs.property "forge", rootProject.forge
    inputs.property "pack_format", rootProject.pack_format
    inputs.property "mixin_compat", rootProject.mixin_compat

    filesMatching("META-INF/mods.toml") {
        expand (
            "version": project.version,
            "minecraft_version": rootProject.minecraft_version,
            "architectury_version": rootProject.architectury_version,
            "forge": rootProject.forge
        )
    }
    filesMatching("pack.mcmeta") {
        expand "pack_format": rootProject.pack_format
    }
    filesMatching("deepslateinstamine.mixins.json") {
        expand "mixin_compat": rootProject.mixin_compat
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier "forge"
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}

unifiedPublishing {
    project {
        gameVersions = ["${rootProject.minecraft_version}"]
        gameLoaders = ["forge"]
        displayName= "Deepslate Instamine ${rootProject.mod_version} - ${rootProject.release_type} - forge - ${rootProject.minecraft_version}"
        version = "${rootProject.mod_version}_${rootProject.release_type}_forge_${rootProject.minecraft_version}"
        releaseType = "${rootProject.release_type}"
        var chlog= System.getenv("DEEPSLATE_CHANGELOG")
        if (chlog != null) {
           changelog= chlog
        }
        mainPublication tasks.remapJar
        relations {                    
            depends {
                curseforge = "architectury-api" // Optional, project slug
                modrinth = "lhGA9TYQ" // Optional, project slug or id
            }            
            includes {} // Mark as an included dependency
            optional {
            } // Mark as an optional dependency
            conflicts {} // Mark as a conflicted dependency
        }

        var cfToken = System.getenv("CF_TOKEN")
        if (cfToken != null) {
            curseforge {
                token = cfToken
                id = "534489" // Required, must be a string, ID of CurseForge project
            }
        }

        var mrToken = System.getenv("MODRINTH_TOKEN")
        if (mrToken != null) {
            modrinth {
                displayName= "Deepslate Instamine"
                token = mrToken
                id = "g7kBNY9K" // Required, must be a string, ID of Modrinth project
            }
        }
    }
}